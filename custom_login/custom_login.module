<?php
/**
 * Implementation of hook_menu()
 */
function custom_login_menu() {

  $items = array();

  // definition for main page
  $items['customlogin'] = array('title' => t('Custom login'),
      'description' => t('Settings for Ticket System'),
      'page callback' => 'custom_login_form',
      'access callback' => TRUE,
    );
  // definition for default tab.
  $items['customlogin/login'] = array(
      'title' => t('Login'),
      'description' => t('Settings for Ticket System'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );
  // definition for additional tab.
  $items['customlogin/settings'] = array(
      'title' => t('Settings'),
      'description' => t('Settings for Ticket System'),
      'access callback' => true,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_login_settings'),
	  'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    );

  return $items;
}

function custom_login_settings_root() {
  return 'page root';
}

function custom_login_settings_mail() {
  return 'page mail';
}

function custom_login_form(){
	$form['username'] = array(
		'#type' => 'textfield',
		'#title' => t('User name')
	);
	
	$form['password'] = array(
		'#type' => 'password',
		'#title' => t('Password')
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
	);
		
	return $form;
}

function custom_login_settings(){
	$form['service'] = array(
		'#type' => 'textfield',
		'#title' => t('Service URL')
	);
	
	$form['key'] = array(
		'#type' => 'textfield',
		'#title' => t('Key')
	);
	
	/*
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Login'),
	);*/
	
	$form['#submit'][] = 'custom_login_settings_submit';
	return system_settings_form($form);
	//return $form;
}

function custom_login_form_submit($form_id, $form_values){
	$message = 'You have submitted the ' . $form_id . ' form which contains the following data: ' . print_r($form_values, true);
	drupal_set_message(t($message));
}

function custom_login_settings_submit($form, $form_state){
	// Loop through each of the content type checkboxes shown on the form.
	foreach($form_state['values']['annotate_node_types'] as $key => $value){
		// If the checkbox a content type is unchecked, look to see whether this content type has the annotation field attached
		// to it using the field_info_instance function. If it does then we need to remove the annotation field as the 
		// administrator has unchecked the box.
		if (!$value){
			$instance = field_info_instance('node', 'annotation', $key);
			if (!empty($instance)){
				field_delete_instance($instance);
				watchdog("Annotation", 'Deleted annotation field from content type: %key', array('%key' => $key));
			}
		} else {
			// If the checkbox for a content type is checked, look to see whether the field is associated with that content type. 
			// If not then add the annotation field to the content type.
			$instance = field_info_instance('node', 'annotation', $key);
			if (empty($instance)){
				$instance = array(
					'field_name' => 'annotation',
					'entity_type' => 'node',
					'bundle' => $key,
					'label' => t('Annotation'),
					'widget_type' => 'text_textarea_with_summary',
					'settings' => array('display_summary' => TRUE),
					'display' => array(
						'default' => array(
							'type' => 'text_default'
						),
						'teaser' => array(
							'type' => 'text_summary_or_trimmed'
						)
					)
				);
				$instance = field_create_instance($instance);
				watchdog("Annotation", 'Added annotation field to content type: %key', array('%key' => $key));
			}
		}
	}
}
